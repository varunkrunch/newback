# FastAPI Backend Serper Router

from fastapi import APIRouter, HTTPException, status, Query
from enum import Enum
from pydantic import Field
import requests
import os

# Create a router for Serper.dev Google search endpoints
router = APIRouter(
    prefix="/api/v1/serper",
    tags=["Serper Google Search"],
)

# Country Enum with flags and names as values
class Country(str, Enum):
    US = "ðŸ‡ºðŸ‡¸ United States (us)"
    GB = "ðŸ‡¬ðŸ‡§ United Kingdom (gb)" 
    CA = "ðŸ‡¨ðŸ‡¦ Canada (ca)"
    AU = "ðŸ‡¦ðŸ‡º Australia (au)"
    DE = "ðŸ‡©ðŸ‡ª Germany (de)"
    FR = "ðŸ‡«ðŸ‡· France (fr)"
    ES = "ðŸ‡ªðŸ‡¸ Spain (es)"
    IT = "ðŸ‡®ðŸ‡¹ Italy (it)"
    JP = "ðŸ‡¯ðŸ‡µ Japan (jp)"
    KR = "ðŸ‡°ðŸ‡· South Korea (kr)"
    CN = "ðŸ‡¨ðŸ‡³ China (cn)"
    IN = "ðŸ‡®ðŸ‡³ India (in)"
    BR = "ðŸ‡§ðŸ‡· Brazil (br)"
    MX = "ðŸ‡²ðŸ‡½ Mexico (mx)"
    RU = "ðŸ‡·ðŸ‡º Russia (ru)"
    NL = "ðŸ‡³ðŸ‡± Netherlands (nl)"
    SE = "ðŸ‡¸ðŸ‡ª Sweden (se)"
    NO = "ðŸ‡³ðŸ‡´ Norway (no)"
    DK = "ðŸ‡©ðŸ‡° Denmark (dk)"
    FI = "ðŸ‡«ðŸ‡® Finland (fi)"
    PL = "ðŸ‡µðŸ‡± Poland (pl)"
    CZ = "ðŸ‡¨ðŸ‡¿ Czech Republic (cz)"
    HU = "ðŸ‡­ðŸ‡º Hungary (hu)"
    RO = "ðŸ‡·ðŸ‡´ Romania (ro)"
    BG = "ðŸ‡§ðŸ‡¬ Bulgaria (bg)"
    HR = "ðŸ‡­ðŸ‡· Croatia (hr)"
    SI = "ðŸ‡¸ðŸ‡® Slovenia (si)"
    SK = "ðŸ‡¸ðŸ‡° Slovakia (sk)"
    LT = "ðŸ‡±ðŸ‡¹ Lithuania (lt)"
    LV = "ðŸ‡±ðŸ‡» Latvia (lv)"
    EE = "ðŸ‡ªðŸ‡ª Estonia (ee)"
    IE = "ðŸ‡®ðŸ‡ª Ireland (ie)"
    PT = "ðŸ‡µðŸ‡¹ Portugal (pt)"
    GR = "ðŸ‡¬ðŸ‡· Greece (gr)"
    TR = "ðŸ‡¹ðŸ‡· Turkey (tr)"
    IL = "ðŸ‡®ðŸ‡± Israel (il)"
    AE = "ðŸ‡¦ðŸ‡ª UAE (ae)"
    SA = "ðŸ‡¸ðŸ‡¦ Saudi Arabia (sa)"
    EG = "ðŸ‡ªðŸ‡¬ Egypt (eg)"
    ZA = "ðŸ‡¿ðŸ‡¦ South Africa (za)"
    NG = "ðŸ‡³ðŸ‡¬ Nigeria (ng)"
    KE = "ðŸ‡°ðŸ‡ª Kenya (ke)"
    MA = "ðŸ‡²ðŸ‡¦ Morocco (ma)"
    TN = "ðŸ‡¹ðŸ‡³ Tunisia (tn)"
    
    def get_code(self) -> str:
        """Extract the country code from the enum value."""
        return self.value.split("(")[-1].rstrip(")")
    
    def get_name(self) -> str:
        """Extract the country name from the enum value."""
        return self.value.split(")")[0].split(" ", 1)[1]
    
    def get_flag(self) -> str:
        """Extract the flag from the enum value."""
        return self.value.split(" ")[0]

# Language Enum with flags and names as values
class Language(str, Enum):
    EN = "ðŸ‡ºðŸ‡¸ English (en)"
    ES = "ðŸ‡ªðŸ‡¸ Spanish (es)"
    FR = "ðŸ‡«ðŸ‡· French (fr)"
    DE = "ðŸ‡©ðŸ‡ª German (de)"
    IT = "ðŸ‡®ðŸ‡¹ Italian (it)"
    PT = "ðŸ‡µðŸ‡¹ Portuguese (pt)"
    RU = "ðŸ‡·ðŸ‡º Russian (ru)"
    JA = "ðŸ‡¯ðŸ‡µ Japanese (ja)"
    KO = "ðŸ‡°ðŸ‡· Korean (ko)"
    ZH = "ðŸ‡¨ðŸ‡³ Chinese (zh)"
    AR = "ðŸ‡¸ðŸ‡¦ Arabic (ar)"
    HI = "ðŸ‡®ðŸ‡³ Hindi (hi)"
    TH = "ðŸ‡¹ðŸ‡­ Thai (th)"
    VI = "ðŸ‡»ðŸ‡³ Vietnamese (vi)"
    TR = "ðŸ‡¹ðŸ‡· Turkish (tr)"
    PL = "ðŸ‡µðŸ‡± Polish (pl)"
    NL = "ðŸ‡³ðŸ‡± Dutch (nl)"
    SV = "ðŸ‡¸ðŸ‡ª Swedish (sv)"
    DA = "ðŸ‡©ðŸ‡° Danish (da)"
    NO = "ðŸ‡³ðŸ‡´ Norwegian (no)"
    FI = "ðŸ‡«ðŸ‡® Finnish (fi)"
    CS = "ðŸ‡¨ðŸ‡¿ Czech (cs)"
    HU = "ðŸ‡­ðŸ‡º Hungarian (hu)"
    RO = "ðŸ‡·ðŸ‡´ Romanian (ro)"
    BG = "ðŸ‡§ðŸ‡¬ Bulgarian (bg)"
    HR = "ðŸ‡­ðŸ‡· Croatian (hr)"
    SK = "ðŸ‡¸ðŸ‡° Slovak (sk)"
    SL = "ðŸ‡¸ðŸ‡® Slovenian (sl)"
    ET = "ðŸ‡ªðŸ‡ª Estonian (et)"
    LV = "ðŸ‡±ðŸ‡» Latvian (lv)"
    LT = "ðŸ‡±ðŸ‡¹ Lithuanian (lt)"
    EL = "ðŸ‡¬ðŸ‡· Greek (el)"
    HE = "ðŸ‡®ðŸ‡± Hebrew (he)"
    FA = "ðŸ‡®ðŸ‡· Persian (fa)"
    UR = "ðŸ‡µðŸ‡° Urdu (ur)"
    BN = "ðŸ‡§ðŸ‡© Bengali (bn)"
    TA = "ðŸ‡±ðŸ‡° Tamil (ta)"
    TE = "ðŸ‡®ðŸ‡³ Telugu (te)"
    ML = "ðŸ‡®ðŸ‡³ Malayalam (ml)"
    KN = "ðŸ‡®ðŸ‡³ Kannada (kn)"
    GU = "ðŸ‡®ðŸ‡³ Gujarati (gu)"
    PA = "ðŸ‡®ðŸ‡³ Punjabi (pa)"
    OR = "ðŸ‡®ðŸ‡³ Odia (or)"
    AS = "ðŸ‡®ðŸ‡³ Assamese (as)"
    NE = "ðŸ‡³ðŸ‡µ Nepali (ne)"
    SI = "ðŸ‡±ðŸ‡° Sinhala (si)"
    MY = "ðŸ‡²ðŸ‡² Burmese (my)"
    KM = "ðŸ‡°ðŸ‡­ Khmer (km)"
    LO = "ðŸ‡±ðŸ‡¦ Lao (lo)"
    KA = "ðŸ‡¬ðŸ‡ª Georgian (ka)"
    AM = "ðŸ‡ªðŸ‡¹ Amharic (am)"
    TI = "ðŸ‡ªðŸ‡¹ Tigrinya (ti)"
    SW = "ðŸ‡¹ðŸ‡¿ Swahili (sw)"
    ZU = "ðŸ‡¿ðŸ‡¦ Zulu (zu)"
    AF = "ðŸ‡¿ðŸ‡¦ Afrikaans (af)"
    SQ = "ðŸ‡¦ðŸ‡± Albanian (sq)"
    EU = "ðŸ‡ªðŸ‡¸ Basque (eu)"
    BE = "ðŸ‡§ðŸ‡¾ Belarusian (be)"
    BS = "ðŸ‡§ðŸ‡¦ Bosnian (bs)"
    CA = "ðŸ‡ªðŸ‡¸ Catalan (ca)"
    CY = "ðŸ‡¬ðŸ‡§ Welsh (cy)"
    GL = "ðŸ‡ªðŸ‡¸ Galician (gl)"
    IS = "ðŸ‡®ðŸ‡¸ Icelandic (is)"
    MK = "ðŸ‡²ðŸ‡° Macedonian (mk)"
    MT = "ðŸ‡²ðŸ‡¹ Maltese (mt)"
    SR = "ðŸ‡·ðŸ‡¸ Serbian (sr)"
    UK = "ðŸ‡ºðŸ‡¦ Ukrainian (uk)"
    YI = "ðŸ‡®ðŸ‡± Yiddish (yi)"
    
    def get_code(self) -> str:
        """Extract the language code from the enum value."""
        return self.value.split("(")[-1].rstrip(")")
    
    def get_name(self) -> str:
        """Extract the language name from the enum value."""
        return self.value.split(")")[0].split(" ", 1)[1]
    
    def get_flag(self) -> str:
        """Extract the flag from the enum value."""
        return self.value.split(" ")[0]

def get_serper_api_key() -> str:
    """Get Serper API key from environment variables."""
    api_key = os.getenv("SERPER_API_KEY")
    if not api_key:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Serper API key not configured. Please set SERPER_API_KEY environment variable."
        )
    return api_key

@router.get("/options")
async def get_search_options():
    """
    Get available countries and languages for search.
    
    Returns a list of all available countries and languages with their flags and names.
    """
    countries = [
        {
            "code": country.get_code(), 
            "name": country.get_name(), 
            "flag": country.get_flag(),
            "display": country.value
        }
        for country in Country
    ]
    
    languages = [
        {
            "code": language.get_code(), 
            "name": language.get_name(), 
            "flag": language.get_flag(),
            "display": language.value
        }
        for language in Language
    ]
    
    return {
        "countries": countries,
        "languages": languages,
        "total_countries": len(countries),
        "total_languages": len(languages)
    }

@router.get("/search")
async def google_search(
    query: str = Query(..., description="The search query string."),
    num_results: int = Query(10, description="Number of results to return (1-100)."),
    country: Country = Query(Country.US, description="Select country for search results. Use /api/v1/serper/options to see all available countries with flags."),
    language: Language = Query(Language.EN, description="Select language for search results. Use /api/v1/serper/options to see all available languages with flags.")
):
    """
    Google search using Serper.dev API.
    
    This endpoint automatically uses the SERPER_API_KEY from environment variables.
    No need to manually enter API key - it's loaded from .env file.
    """
    try:
        # Get API key from environment
        api_key = get_serper_api_key()
        
        # Prepare the request payload
        payload = {
            "q": query,
            "num": min(max(num_results, 1), 100),  # Clamp between 1 and 100
            "gl": country.get_code(),  # Get the country code from enum
            "hl": language.get_code()  # Get the language code from enum
        }
        
        # Make request to Serper.dev API
        headers = {
            "X-API-KEY": api_key,
            "Content-Type": "application/json"
        }
        
        response = requests.post(
            "https://google.serper.dev/search",
            json=payload,
            headers=headers,
            timeout=30
        )
        
        if response.status_code != 200:
            raise HTTPException(
                status_code=status.HTTP_502_BAD_GATEWAY,
                detail=f"Serper API error: {response.status_code} - {response.text}"
            )
        
        data = response.json()
        
        # Return clean, simple response
        return {
            "query": query,
            "results": [
                {
                    "title": result.get("title", ""),
                    "link": result.get("link", ""),
                    "snippet": result.get("snippet", ""),
                    "position": i + 1
                }
                for i, result in enumerate(data.get("organic", []))
            ],
            "total_results": data.get("searchInformation", {}).get("totalResults"),
            "search_time": data.get("searchInformation", {}).get("searchTime")
        }
        
    except requests.exceptions.RequestException as e:
        raise HTTPException(
            status_code=status.HTTP_502_BAD_GATEWAY,
            detail=f"Failed to connect to Serper API: {str(e)}"
        )
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Internal server error: {str(e)}"
        )
